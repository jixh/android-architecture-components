/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.android.example.github"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.android.example.github.util.GithubTestRunner"
        buildConfigField("String","HOST_API","\"https://api.github.com/\"")
        manifestPlaceholders =
                [
                        UMENG_CHANNEL_VALUE: "umeng",
                        APP_NAME: "GitHub",
                ]
    }

    buildTypes {
        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        debug {
            try {
                storeFile file("key.jks")
                storePassword KEYSTORE_PASSWORD
                keyAlias "alias"
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }

        release {
            try {
                storeFile file("key.jks")
                storePassword KEYSTORE_PASSWORD
                keyAlias "alias"
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    flavorDimensions "app"

    productFlavors {

//        dev{
//            minSdkVersion 21       // To avoid using legacy multidex, set minSdkVersion to 21 or higher.
//            versionNameSuffix "-dev"
//            applicationIdSuffix '.dev'
//
//            resConfigs "xhdpi"//,"zh"
//        }

//        prod {
//            minSdkVersion 14
//        }

//        TestLocal{//测试库内网
//            versionNameSuffix "-" + name
////            applicationIdSuffix '.testinner'
//            minSdkVersion 21
//            targetSdkVersion 22
//            buildConfigField("String","API_HOST","\"http://192.168.18.102:8082\"")
////            buildConfigField("String","API_HOST","\"http://192.168.8.186:9999\"")
//        }

        TestInner{//测试库内网
//            versionNameSuffix "-" + name
//            applicationIdSuffix '.'.concat(name).toLowerCase()
            minSdkVersion 21
            targetSdkVersion 26
//            buildConfigField("String","HOST_API","\"http://192.168.3.19:8088\"")

            dimension "app"
        }
//        TestOutter{//测试库外网
//            versionNameSuffix "-" + name
//            applicationIdSuffix '.testoutter'
//            buildConfigField("String","API_HOST","\"http://60.190.233.23:8080\"")
//
//        }
//
//        PreProd{//预发布版本
//            versionNameSuffix "-" + name
//            applicationIdSuffix '.preprod'
//            buildConfigField("String","API_HOST","\"http://36.22.191.29:8780\"")
//
//        }
//
//        Prod {//正式版
//            buildConfigField("String","API_HOST","\"http://mobi.vongihealth.com:85\"")
//        }

//        tencent {}
//        wandoujia {}
//        _360 {}
//        baidu {}
//        xiaomi {}
//        taobao {}
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
            switch (name){
                case "TestInner": flavor.manifestPlaceholders =[APP_NAME: "GigHub_测试",] ; break
                case "PreProd": flavor.manifestPlaceholders =[APP_NAME: "GigHub_预发布",]
            }
    }

    buildTypes {

        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

//        beta.initWith(buildTypes.release)
//        beta {
//            buildConfigField "boolean", "LOG_DEBUG", "true"
//            applicationIdSuffix '.beta'
//            versionNameSuffix '-BETA'
//        }

    }

    applicationVariants.all { variant ->
            variant.outputs.all {
                def appName = "GigHub"
                def newName = ""
                def channelName = variant.productFlavors[0].name
                def versionName = android.defaultConfig.versionName
                def versionCode = android.defaultConfig.versionCode
                def releaseTime = new Date().format("yyyyMMdd", TimeZone.getTimeZone("Asia/Shanghai"))
                newName = appName + "_" + channelName + "_" + releaseTime
                if (variant.buildType.name.equals("debug")) {
                    newName += "_debug_"
                } else if (variant.buildType.name.equals("beta")){
                    newName += "_beta_"
                } else if (variant.buildType.name.equals("release")){
                    newName += "_release_"
                }
                newName  +=  versionName+ "_" +versionCode +".apk"
                outputFileName  = newName
            }
    }

    // 打包排除以下文件，屏蔽因as自身bug，在没有重复引用jar时，提示jar重复引用的问题
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }

}


dependencies {
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "android.arch.persistence.room:runtime:$arch_version"
    implementation "android.arch.lifecycle:runtime:$arch_version"
    implementation "android.arch.lifecycle:extensions:$arch_version"
    implementation "android.arch.lifecycle:reactivestreams:$arch_version"
    annotationProcessor "android.arch.persistence.room:compiler:$arch_version"
    annotationProcessor "android.arch.lifecycle:compiler:$arch_version"

//    implementation "com.android.support:appcompat-v7:$support_version"



    testCompile "junit:junit:$junit_version"
    testCompile "com.squareup.okhttp3:mockwebserver:$mockwebserver_version"
    testCompile("android.arch.core:core-testing:$arch_version", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })
    androidTestCompile "com.android.support:appcompat-v7:$support_version"
    androidTestCompile "com.android.support:recyclerview-v7:$support_version"
    androidTestCompile "com.android.support:support-v4:$support_version"
    androidTestCompile "com.android.support:design:$support_version"
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestCompile("android.arch.core:core-testing:$arch_version", {
    })
    androidTestCompile "org.mockito:mockito-android:$mockito_version"
    compile project(':library')
}

